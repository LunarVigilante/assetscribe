'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { getCategoryStockPhotoUrl, createImageFallbackHandler } from '@/lib/utils'
import { 
  ArrowLeft,
  Package,
  Upload,
  CheckCircle,
  X
} from 'lucide-react'

export function AddAssetForm() {
  const router = useRouter()
  const [currentPage, setCurrentPage] = useState(1)
  const totalPages = 4  // Changed from 5 to 4 (merging step 5 with step 2)

  // Photo handling state  
  const [photoOption, setPhotoOption] = useState<'model' | 'unique' | 'stock'>('stock')
  const [selectedPhoto, setSelectedPhoto] = useState<File | null>(null)

  // Document handling state
  const [selectedDocuments, setSelectedDocuments] = useState<File[]>([])
  const [documentPreviews, setDocumentPreviews] = useState<{[key: string]: string}>({})

  // Auto-fill note state
  const [modelNameAutoFillNote, setModelNameAutoFillNote] = useState('')

  // Vendor management state
  const [customVendor, setCustomVendor] = useState('')
  const [showCustomVendor, setShowCustomVendor] = useState(false)
  const [vendors, setVendors] = useState<{ id: string; name: string }[]>([])

  // Manufacturer management state
  const [customManufacturer, setCustomManufacturer] = useState('')
  const [showCustomManufacturer, setShowCustomManufacturer] = useState(false)
  const [manufacturers, setManufacturers] = useState<{ id: string; name: string }[]>([])

  // Category management state
  const [customCategory, setCustomCategory] = useState('')
  const [showCustomCategory, setShowCustomCategory] = useState(false)
  const [dbCategories, setDbCategories] = useState<{ id: string; name: string }[]>([])

  // Model suggestions state
  const [modelSuggestions, setModelSuggestions] = useState<string[]>([])
  const [showModelSuggestions, setShowModelSuggestions] = useState(false)

  // Form input state
  const [assetTag, setAssetTag] = useState('')
  const [deviceName, setDeviceName] = useState('')
  const [serialNumber, setSerialNumber] = useState('')
  const [modelName, setModelName] = useState('')
  const [modelNumber, setModelNumber] = useState('')
  const [selectedManufacturer, setSelectedManufacturer] = useState('')
  const [selectedFormCategory, setSelectedFormCategory] = useState('')
  const [selectedVendor, setSelectedVendor] = useState('')
  const [notes, setNotes] = useState('')
  const [assetValue, setAssetValue] = useState('')
  const [externalTicketId, setExternalTicketId] = useState('')

  // Purchase Information state
  const [purchaseCost, setPurchaseCost] = useState('')
  const [purchaseDate, setPurchaseDate] = useState('')
  const [purchaseOrderNumber, setPurchaseOrderNumber] = useState('')
  const [depreciationMethod, setDepreciationMethod] = useState('')
  const [usefulLife, setUsefulLife] = useState('')

  // Status & Assignment state
  const [selectedStatus, setSelectedStatus] = useState('')
  const [selectedAssignedTo, setSelectedAssignedTo] = useState('')
  const [selectedDepartment, setSelectedDepartment] = useState('')
  const [selectedLocation, setSelectedLocation] = useState('')
  const [selectedCondition, setSelectedCondition] = useState('')
  const [assignmentNotes, setAssignmentNotes] = useState('')
  const [isFixedStation, setIsFixedStation] = useState(false)
  const [fixedStationId, setFixedStationId] = useState('')

  // Asset relationships state
  const [connectedAssets, setConnectedAssets] = useState<{id: string; name: string; relationship: string}[]>([])

  // Hardware Specifications state
  const [cpu, setCpu] = useState('')
  const [ramGb, setRamGb] = useState('')
  const [ramType, setRamType] = useState('')
  const [storageType, setStorageType] = useState('')
  const [storageSizeGb, setStorageSizeGb] = useState('')
  const [storageUnit, setStorageUnit] = useState('GB')
  const [screenSize, setScreenSize] = useState('')
  const [gpu, setGpu] = useState('')
  const [operatingSystem, setOperatingSystem] = useState('')
  const [bitlockerEnabled, setBitlockerEnabled] = useState(false)
  const [bitlockerRecoveryKey, setBitlockerRecoveryKey] = useState('')

  // Desktop-specific attributes state
  const [macAddress, setMacAddress] = useState('')
  const [numberOfHardDrives, setNumberOfHardDrives] = useState('')
  const [networkType, setNetworkType] = useState('DHCP')
  const [staticIpAddress, setStaticIpAddress] = useState('')
  const [hasWifi, setHasWifi] = useState(false)
  const [wifiStandard, setWifiStandard] = useState('')
  const [opticalDriveType, setOpticalDriveType] = useState('')
  const [thunderboltPorts, setThunderboltPorts] = useState('')
  const [usbAPorts, setUsbAPorts] = useState('')
  const [usbCPorts, setUsbCPorts] = useState('')
  const [hdmiPorts, setHdmiPorts] = useState('')
  const [displayPortPorts, setDisplayPortPorts] = useState('')
  const [vgaPorts, setVgaPorts] = useState('')
  const [dviPorts, setDviPorts] = useState('')
  const [microHdmiPorts, setMicroHdmiPorts] = useState('')
  
  // Laptop external display ports
  const [hasExternalDisplayPorts, setHasExternalDisplayPorts] = useState(false)
  const [laptopHdmiPorts, setLaptopHdmiPorts] = useState('')
  const [laptopDisplayPortPorts, setLaptopDisplayPortPorts] = useState('')
  const [laptopMicroHdmiPorts, setLaptopMicroHdmiPorts] = useState('')
  const [laptopVgaPorts, setLaptopVgaPorts] = useState('')
  const [laptopDviPorts, setLaptopDviPorts] = useState('')
  
  const [ethernetPorts, setEthernetPorts] = useState('')
  const [ethernetSpeed, setEthernetSpeed] = useState('')
  const [hasAudioJacks, setHasAudioJacks] = useState(false)
  const [hasSdCardReader, setHasSdCardReader] = useState(false)

  // WiFi-specific network fields
  const [wifiMacAddress, setWifiMacAddress] = useState('')
  const [wifiNetworkType, setWifiNetworkType] = useState('DHCP')
  const [wifiStaticIpAddress, setWifiStaticIpAddress] = useState('')

  // Bluetooth capability
  const [hasBluetooth, setHasBluetooth] = useState(false)
  const [bluetoothVersion, setBluetoothVersion] = useState('')

  // Laptop-specific attributes state
  const [screenResolution, setScreenResolution] = useState('')
  const [hasTouchscreen, setHasTouchscreen] = useState(false)
  const [batterySize, setBatterySize] = useState('')
  const [batteryRemovable, setBatteryRemovable] = useState(false)
  const [hasWebcam, setHasWebcam] = useState(false)
  const [webcamResolution, setWebcamResolution] = useState('')
  const [hasPrivacyShutter, setHasPrivacyShutter] = useState(false)
  const [hasBacklitKeyboard, setHasBacklitKeyboard] = useState(false)
  const [deviceWeight, setDeviceWeight] = useState('')

  // Dynamic storage drives
  const [storageDrivers, setStorageDrivers] = useState([
    { type: '', size: '', unit: 'GB' }
  ])

  // Purchase/Lease fields
  const [acquisitionType, setAcquisitionType] = useState('Purchase')
  const [leaseProvider, setLeaseProvider] = useState('')
  const [leaseStartDate, setLeaseStartDate] = useState('')
  const [leaseEndDate, setLeaseEndDate] = useState('')
  const [monthlyCost, setMonthlyCost] = useState('')
  const [equipmentId, setEquipmentId] = useState('')
  const [leaseAgreementId, setLeaseAgreementId] = useState('')

  // Desktop PSU fields
  const [psuWattage, setPsuWattage] = useState('')
  const [psuEfficiencyRating, setPsuEfficiencyRating] = useState('')

  // Retirement/Disposal fields
  const [retirementDate, setRetirementDate] = useState('')
  const [disposalMethod, setDisposalMethod] = useState('')

  // Warranty & Maintenance state
  const [warrantyExpiryDate, setWarrantyExpiryDate] = useState('')
  const [maintenanceSchedule, setMaintenanceSchedule] = useState('')
  const [lastMaintenanceDate, setLastMaintenanceDate] = useState('')

  // Monitor-specific attributes state
  const [monitorScreenSize, setMonitorScreenSize] = useState('')
  const [monitorResolution, setMonitorResolution] = useState('')
  const [monitorPanelType, setMonitorPanelType] = useState('')
  const [monitorAspectRatio, setMonitorAspectRatio] = useState('')
  const [monitorRefreshRate, setMonitorRefreshRate] = useState('')
  const [monitorHdmiPorts, setMonitorHdmiPorts] = useState('')
  const [monitorDisplayPortPorts, setMonitorDisplayPortPorts] = useState('')
  const [monitorUsbCPorts, setMonitorUsbCPorts] = useState('')
  const [monitorUsbCPowerDelivery, setMonitorUsbCPowerDelivery] = useState('')
  const [monitorVgaPorts, setMonitorVgaPorts] = useState('')
  const [monitorDviPorts, setMonitorDviPorts] = useState('')
  const [monitorBuiltInUsbHub, setMonitorBuiltInUsbHub] = useState(false)
  const [monitorUsbADownstreamPorts, setMonitorUsbADownstreamPorts] = useState('')
  const [monitorHeightAdjust, setMonitorHeightAdjust] = useState(false)
  const [monitorTilt, setMonitorTilt] = useState(false)
  const [monitorSwivel, setMonitorSwivel] = useState(false)
  const [monitorPivot, setMonitorPivot] = useState(false)
  const [monitorVesaMount, setMonitorVesaMount] = useState(false)
  const [monitorBuiltInSpeakers, setMonitorBuiltInSpeakers] = useState(false)
  const [monitorBuiltInWebcam, setMonitorBuiltInWebcam] = useState(false)
  const [monitorWebcamResolution, setMonitorWebcamResolution] = useState('')
  const [monitorWebcamPrivacyShutter, setMonitorWebcamPrivacyShutter] = useState(false)
  const [monitorCurvedScreen, setMonitorCurvedScreen] = useState(false)
  const [monitorCurvature, setMonitorCurvature] = useState('')
  const [monitorActsAsDock, setMonitorActsAsDock] = useState(false)
  const [monitorDockConnectionType, setMonitorDockConnectionType] = useState('')
  const [monitorDockEthernet, setMonitorDockEthernet] = useState(false)
  const [monitorUsbHubType, setMonitorUsbHubType] = useState('')

  // Phone & Tablet state
  const [phoneScreenSize, setPhoneScreenSize] = useState('')
  const [phoneOperatingSystem, setPhoneOperatingSystem] = useState('')
  const [phoneOsVersion, setPhoneOsVersion] = useState('')
  const [phoneProcessor, setPhoneProcessor] = useState('')
  const [phoneRam, setPhoneRam] = useState('')
  const [phoneStorage, setPhoneStorage] = useState('')
  const [phoneStorageType, setPhoneStorageType] = useState('')
  const [phoneExpandableStorage, setPhoneExpandableStorage] = useState(false)
  const [phoneMaxExpandableStorage, setPhoneMaxExpandableStorage] = useState('')
  const [phoneExpandableStorageType, setPhoneExpandableStorageType] = useState('')
  const [phoneBatteryCapacity, setBatteryCapacity] = useState('')
  const [phoneNetworkType, setPhoneNetworkType] = useState('')
  const [phoneCarrierLocked, setPhoneCarrierLocked] = useState(false)
  const [phoneCarrier, setPhoneCarrier] = useState('')
  const [phoneImei, setPhoneImei] = useState('')
  const [phoneSimType, setPhoneSimType] = useState('')
  const [phoneHasWifi, setPhoneHasWifi] = useState(false)
  const [phoneHasBluetooth, setPhoneHasBluetooth] = useState(false)
  const [phoneHasGps, setPhoneHasGps] = useState(false)
  const [phoneHasNfc, setPhoneHasNfc] = useState(false)
  const [phoneHasFingerprint, setPhoneHasFingerprint] = useState(false)
  const [phoneHasFaceRecognition, setPhoneHasFaceRecognition] = useState(false)
  const [phoneRearCamera, setPhoneRearCamera] = useState('')
  const [phoneFrontCamera, setPhoneFrontCamera] = useState('')
  const [phoneColor, setPhoneColor] = useState('')
  const [phoneCondition, setPhoneCondition] = useState('')
  const [phoneNumber, setPhoneNumber] = useState('')
  const [simNumber, setSimNumber] = useState('')
  const [chargerType, setChargerType] = useState('')
  
  // MDM state
  const [isInAppleBusinessManager, setIsInAppleBusinessManager] = useState(false)
  const [appleBusinessManagerDetails, setAppleBusinessManagerDetails] = useState('')
  const [isInIntune, setIsInIntune] = useState(false)
  const [intuneDetails, setIntuneDetails] = useState('')
  const [isInMosyle, setIsInMosyle] = useState(false)
  const [mosyleDetails, setMosyleDetails] = useState('')
  
  // Enhanced Apple Business Manager state
  const [abmDeviceManagementService, setAbmDeviceManagementService] = useState('')
  const [abmActivationLock, setAbmActivationLock] = useState(false)
  const [abmSourceOfAddition, setAbmSourceOfAddition] = useState('')
  const [abmOrderNumber, setAbmOrderNumber] = useState('')
  
  // Enhanced Intune state
  const [intuneManagementName, setIntuneManagementName] = useState('')
  const [intunePrimaryUser, setIntunePrimaryUser] = useState('')
  const [intuneRemoteAssistance, setIntuneRemoteAssistance] = useState('')
  const [intuneDeviceCompliancePolicies, setIntuneDeviceCompliancePolicies] = useState<string[]>([])
  const [intuneDeviceConfigPolicies, setIntuneDeviceConfigPolicies] = useState<string[]>([])
  const [intuneAppConfigPolicies, setIntuneAppConfigPolicies] = useState<string[]>([])
  const [intuneGroupMembership, setIntuneGroupMembership] = useState('')
  
  // Network details state
  const [phoneWifiTechnology, setPhoneWifiTechnology] = useState('')
  const [phoneWifiMacAddress, setPhoneWifiMacAddress] = useState('')
  const [phoneBluetoothMacAddress, setPhoneBluetoothMacAddress] = useState('')
  
  // Camera lens state
  const [cameraLenses, setCameraLenses] = useState<Array<{name: string, specs: string}>>([])
  
  // Enhanced Intune group membership
  const [intuneGroupMemberships, setIntuneGroupMemberships] = useState<string[]>([])
  
  // Enhanced Mosyle state
  const [mosyleTags, setMosyleTags] = useState<string[]>([])
  const [mosyleDeviceGroup, setMosyleDeviceGroup] = useState('')
  const [mosyleMdmProfiles, setMosyleMdmProfiles] = useState<Array<{name: string, type: string}>>([])
  
  // MDM Profile types
  const mdmProfileTypes = [
    'SSO Extension',
    'WiFi',
    'Allowed/Blocked Apps',
    'Restriction',
    'Home Layout',
    'Web Clip',
    'Passcode Policy',
    'Shared iPad Login Screen',
    'Other'
  ]

  // Document upload state
  const [uploadedDocuments, setUploadedDocuments] = useState<Array<{
    id: string;
    name: string;
    type: string;
    size: number;
    category: string;
    file: File;
  }>>([])

  // Dropdown data state
  const [dropdownData, setDropdownData] = useState({
    manufacturers: [],
    categories: [],
    suppliers: [],
    departments: [],
    locations: [],
    statusLabels: [],
    assetConditions: [],
    maintenanceSchedules: [],
    depreciationMethods: []
  })

  // Loading and error states
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [showSuccessBanner, setShowSuccessBanner] = useState(false)

  // Fetch dropdown data
  const fetchDropdownData = async () => {
    try {
      const response = await fetch('/api/settings/dropdown-lists')
      if (response.ok) {
        const data = await response.json()
        setDropdownData(data)
        setDbCategories(data.categories || [])
      }
    } catch (error) {
      console.error('Failed to fetch dropdown data:', error)
    }
  }

  useEffect(() => {
    fetchDropdownData()
  }, [])

  // Helper functions
  const isDesktopCategory = () => {
    if (!selectedFormCategory) return false
    
    // First, try to find the category in dbCategories
    const selectedCategory = dbCategories.find(cat => cat.id == selectedFormCategory) // Use == to handle string/number comparison
    if (selectedCategory) {
      return selectedCategory.name.toLowerCase().includes('desktop')
    }
    
    // Fallback: check if the selectedFormCategory value itself suggests desktop
    // This handles cases where dbCategories might not be loaded properly
    return String(selectedFormCategory).toLowerCase().includes('desktop')
  }

  const isLaptopCategory = () => {
    if (!selectedFormCategory) return false
    
    // First, try to find the category in dbCategories
    const selectedCategory = dbCategories.find(cat => cat.id == selectedFormCategory) // Use == to handle string/number comparison
    if (selectedCategory) {
      return selectedCategory.name.toLowerCase().includes('laptop')
    }
    
    // Fallback: check if the selectedFormCategory value itself suggests laptop
    return String(selectedFormCategory).toLowerCase().includes('laptop')
  }

  const isMonitorCategory = () => {
    if (!selectedFormCategory) return false
    
    // First, try to find the category in dbCategories
    const selectedCategory = dbCategories.find(cat => cat.id == selectedFormCategory) // Use == to handle string/number comparison
    if (selectedCategory) {
      return selectedCategory.name.toLowerCase().includes('monitor')
    }
    
    // Fallback: check if the selectedFormCategory value itself suggests monitor
    return String(selectedFormCategory).toLowerCase().includes('monitor')
  }

  const isPhoneCategory = () => {
    if (!selectedFormCategory) return false
    
    // First, try to find the category in dbCategories
    const selectedCategory = dbCategories.find(cat => cat.id == selectedFormCategory) // Use == to handle string/number comparison
    if (selectedCategory) {
      return selectedCategory.name.toLowerCase().includes('phone') || selectedCategory.name.toLowerCase().includes('mobile')
    }
    
    // Fallback: check if the selectedFormCategory value itself suggests phone
    return String(selectedFormCategory).toLowerCase().includes('phone') || String(selectedFormCategory).toLowerCase().includes('mobile')
  }

  const isTabletCategory = () => {
    if (!selectedFormCategory) return false
    
    // First, try to find the category in dbCategories
    const selectedCategory = dbCategories.find(cat => cat.id == selectedFormCategory) // Use == to handle string/number comparison
    if (selectedCategory) {
      return selectedCategory.name.toLowerCase().includes('tablet') || selectedCategory.name.toLowerCase().includes('ipad')
    }
    
    // Fallback: check if the selectedFormCategory value itself suggests tablet
    return String(selectedFormCategory).toLowerCase().includes('tablet') || String(selectedFormCategory).toLowerCase().includes('ipad')
  }

  const isCellularNetworkSelected = () => {
    return phoneNetworkType && phoneNetworkType !== 'Wi-Fi Only' && phoneNetworkType !== ''
  }

  const updateStorageDriversCount = (count: string) => {
    const numCount = parseInt(count) || 1
    const maxCount = isLaptopCategory() ? 5 : 10
    const limitedCount = Math.min(Math.max(1, numCount), maxCount)
    
    setNumberOfHardDrives(limitedCount.toString())
    
    const newDrivers = Array.from({ length: limitedCount }, (_, index) => 
      storageDrivers[index] || { type: '', size: '', unit: 'GB' }
    )
    setStorageDrivers(newDrivers)
  }

  const updateStorageDrive = (index: number, field: string, value: string) => {
    const updatedDrivers = [...storageDrivers]
    updatedDrivers[index] = { ...updatedDrivers[index], [field]: value }
    setStorageDrivers(updatedDrivers)
  }

  const isPageValid = () => {
    if (currentPage === 1) {
      return deviceName.trim() !== '' && assetTag.trim() !== ''
    }
    return true
  }

  const handleNextPage = () => {
    if (isPageValid() && currentPage < totalPages) {
      setCurrentPage(currentPage + 1)
    }
  }

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  const handleStepClick = (step: number) => {
    setCurrentPage(step)
  }

  return (
    <>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button variant="outline" onClick={() => router.push('/assets')}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Assets
            </Button>
            <div>
              <h1 className="text-3xl font-bold">Add New Asset</h1>
              <p className="text-muted-foreground">Step {currentPage} of {totalPages}</p>
            </div>
          </div>
        </div>

        {/* Progress Steps */}
        <Card>
          <CardHeader>
            <div className="flex items-center space-x-2">
              {Array.from({ length: totalPages }, (_, i) => (
                <React.Fragment key={i}>
                  <button
                    onClick={() => handleStepClick(i + 1)}
                    className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs font-medium transition-colors hover:bg-primary/10 ${
                      i + 1 < currentPage ? 'bg-primary text-primary-foreground border-primary' :
                      i + 1 === currentPage ? 'bg-background text-primary border-primary' :
                      'bg-background text-muted-foreground border-muted hover:border-primary/50'
                    }`}
                  >
                    {i + 1}
                  </button>
                  {i < totalPages - 1 && (
                    <div className={`flex-1 h-0.5 mx-3 ${
                      i + 1 < currentPage ? 'bg-primary' : 'bg-muted'
                    }`} />
                  )}
                </React.Fragment>
              ))}
            </div>
            
            <div className="mt-3">
              <span className="text-lg font-medium">
                {currentPage === 1 && 'Basic Information & Photos'}
                {currentPage === 2 && 'Purchase Information & Warranty'}
                {currentPage === 3 && 'Status & Assignment'}
                {currentPage === 4 && 'Additional Information'}
              </span>
            </div>
          </CardHeader>
        </Card>

        {/* Form Content */}
        <Card>
          <CardContent className="p-6">
            <form className="space-y-6">
              {/* Page 1: Basic Information & Photos */}
              {currentPage === 1 && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Basic Information</h3>
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm font-medium">Device Name *</label>
                          <Input 
                            placeholder="e.g., John's MacBook Pro" 
                            className="mt-1" 
                            value={deviceName}
                            onChange={(e) => setDeviceName(e.target.value)}
                            required 
                          />
                        </div>
                        <div>
                          <label className="text-sm font-medium">Asset Tag *</label>
                          <Input 
                            placeholder="CH-1234" 
                            className="mt-1" 
                            value={assetTag}
                            onChange={(e) => setAssetTag(e.target.value)}
                            required 
                          />
                        </div>
                      </div>
                      
                      <div>
                        <label className="text-sm font-medium">Category</label>
                        <select 
                          className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                          value={selectedFormCategory}
                          onChange={(e) => setSelectedFormCategory(e.target.value)}
                        >
                          <option value="">Select category...</option>
                          {dbCategories.map(category => (
                            <option key={category.id} value={category.id}>{category.name}</option>
                          ))}
                        </select>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm font-medium">Model Number *</label>
                          <Input 
                            placeholder="e.g., MK183LL/A" 
                            className="mt-1" 
                            value={modelNumber}
                            onChange={(e) => setModelNumber(e.target.value)}
                            required 
                          />
                        </div>
                        <div>
                          <label className="text-sm font-medium">Model Name</label>
                          <Input 
                            placeholder="e.g., MacBook Pro 16-inch" 
                            className="mt-1" 
                            value={modelName}
                            onChange={(e) => setModelName(e.target.value)}
                          />
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm font-medium">Manufacturer</label>
                          <select 
                            className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                            value={selectedManufacturer}
                            onChange={(e) => setSelectedManufacturer(e.target.value)}
                          >
                            <option value="">Select manufacturer...</option>
                            {dropdownData.manufacturers.map((manufacturer: any) => (
                              <option key={manufacturer.id} value={manufacturer.id}>{manufacturer.name}</option>
                            ))}
                          </select>
                        </div>
                        <div>
                          <label className="text-sm font-medium">Serial Number</label>
                          <Input 
                            placeholder="e.g., ABC123456789" 
                            className="mt-1" 
                            value={serialNumber}
                            onChange={(e) => setSerialNumber(e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-4">Asset Photos</h3>
                    <div className="space-y-4">
                      <div className="grid grid-cols-3 gap-4">
                        <button type="button" className="p-3 border rounded-lg text-center border-primary bg-primary/5">
                          <Package className="h-6 w-6 mx-auto mb-1" />
                          <span className="text-sm font-medium block">Use Category Photo</span>
                        </button>
                        <button type="button" className="p-3 border rounded-lg text-center border-muted hover:border-primary/50">
                          <Upload className="h-6 w-6 mx-auto mb-1" />
                          <span className="text-sm font-medium block">Upload Photo</span>
                        </button>
                        <button type="button" className="p-3 border rounded-lg text-center border-muted hover:border-primary/50">
                          <Package className="h-6 w-6 mx-auto mb-1" />
                          <span className="text-sm font-medium block">Model Photo</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Page 2: Purchase Information & Warranty */}
              {currentPage === 2 && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Purchase Information</h3>
                    
                    <div className="mb-6">
                      <label className="text-sm font-medium">Acquisition Type *</label>
                      <select 
                        className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                        value={acquisitionType}
                        onChange={(e) => setAcquisitionType(e.target.value)}
                      >
                        <option value="Purchase">Purchase</option>
                        <option value="Lease">Lease</option>
                      </select>
                    </div>

                    {acquisitionType === 'Purchase' && (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="text-sm font-medium">Purchase Cost</label>
                            <Input 
                              type="number" 
                              step="0.01" 
                              placeholder="1999.99" 
                              className="mt-1" 
                              value={purchaseCost}
                              onChange={(e) => setPurchaseCost(e.target.value)}
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Purchase Date</label>
                            <Input 
                              type="date" 
                              className="mt-1" 
                              value={purchaseDate}
                              onChange={(e) => setPurchaseDate(e.target.value)}
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Purchase Order Number</label>
                            <Input 
                              placeholder="PO-2024-001" 
                              className="mt-1" 
                              value={purchaseOrderNumber}
                              onChange={(e) => setPurchaseOrderNumber(e.target.value)}
                            />
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Depreciation Method</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={depreciationMethod}
                              onChange={(e) => setDepreciationMethod(e.target.value)}
                            >
                              <option value="">Select method...</option>
                              <option value="straight-line">Straight Line</option>
                              <option value="declining-balance">Declining Balance</option>
                              <option value="sum-of-years">Sum of Years</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">Useful Life (Years)</label>
                            <Input 
                              type="number" 
                              placeholder="5" 
                              className="mt-1" 
                              value={usefulLife}
                              onChange={(e) => setUsefulLife(e.target.value)}
                            />
                          </div>
                        </div>
                        
                        <div className="border-t pt-6 mt-6">
                          <h4 className="text-md font-medium mb-4">Retirement / Disposal Planning</h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Retirement Date</label>
                              <Input 
                                type="date" 
                                className="mt-1" 
                                value={retirementDate}
                                onChange={(e) => setRetirementDate(e.target.value)}
                              />
                            </div>
                            <div>
                              <label className="text-sm font-medium">Disposal Method</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={disposalMethod}
                                onChange={(e) => setDisposalMethod(e.target.value)}
                              >
                                <option value="">Select method...</option>
                                <option value="recycling">Recycling</option>
                                <option value="donation">Donation</option>
                                <option value="sale">Sale</option>
                                <option value="trade-in">Trade-in</option>
                                <option value="secure-destruction">Secure Destruction</option>
                                <option value="return-to-vendor">Return to Vendor</option>
                                <option value="internal-transfer">Internal Transfer</option>
                                <option value="storage">Storage</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {acquisitionType === 'Lease' && (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Lease Provider</label>
                            <Input 
                              placeholder="e.g., Dell Financial Services" 
                              className="mt-1" 
                              value={leaseProvider}
                              onChange={(e) => setLeaseProvider(e.target.value)}
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Monthly Cost</label>
                            <Input 
                              type="number" 
                              step="0.01" 
                              placeholder="89.99" 
                              className="mt-1" 
                              value={monthlyCost}
                              onChange={(e) => setMonthlyCost(e.target.value)}
                            />
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Lease Start Date</label>
                            <Input 
                              type="date" 
                              className="mt-1" 
                              value={leaseStartDate}
                              onChange={(e) => setLeaseStartDate(e.target.value)}
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Lease End Date</label>
                            <Input 
                              type="date" 
                              className="mt-1" 
                              value={leaseEndDate}
                              onChange={(e) => setLeaseEndDate(e.target.value)}
                            />
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Equipment ID</label>
                            <Input 
                              placeholder="Equipment identifier from lease" 
                              className="mt-1" 
                              value={equipmentId}
                              onChange={(e) => setEquipmentId(e.target.value)}
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Lease Agreement ID</label>
                            <Input 
                              placeholder="Lease agreement reference" 
                              className="mt-1" 
                              value={leaseAgreementId}
                              onChange={(e) => setLeaseAgreementId(e.target.value)}
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="border-t pt-6 mt-6">
                      <h4 className="text-md font-medium mb-4">Warranty & Maintenance</h4>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="text-sm font-medium">Warranty Expiry Date</label>
                          <Input 
                            type="date" 
                            className="mt-1" 
                            value={warrantyExpiryDate}
                            onChange={(e) => setWarrantyExpiryDate(e.target.value)}
                          />
                        </div>
                        <div>
                          <label className="text-sm font-medium">Maintenance Schedule</label>
                          <select 
                            className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                            value={maintenanceSchedule}
                            onChange={(e) => setMaintenanceSchedule(e.target.value)}
                          >
                            <option value="">Select schedule...</option>
                            <option value="monthly">Monthly</option>
                            <option value="quarterly">Quarterly</option>
                            <option value="semi-annual">Semi-Annual</option>
                            <option value="annual">Annual</option>
                            <option value="as-needed">As Needed</option>
                          </select>
                        </div>
                        <div>
                          <label className="text-sm font-medium">Last Maintenance Date</label>
                          <Input 
                            type="date" 
                            className="mt-1" 
                            value={lastMaintenanceDate}
                            onChange={(e) => setLastMaintenanceDate(e.target.value)}
                          />
                        </div>
                      </div>
                    </div>

                    {/* Document Upload Section */}
                    <div className="border-t pt-6 mt-6">
                      <h4 className="text-md font-medium mb-4">Documentation</h4>
                      <p className="text-sm text-muted-foreground mb-4">
                        Upload relevant documents such as receipts, manuals, warranty information, registration documents, etc.
                      </p>
                      
                      <div className="space-y-4">
                        {/* File Upload Area */}
                        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                          <input
                            type="file"
                            id="document-upload"
                            multiple
                            accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.zip,.rar"
                            className="hidden"
                            onChange={(e) => {
                              const files = Array.from(e.target.files || [])
                              const newDocuments = files.map(file => ({
                                id: Date.now() + Math.random().toString(36).substr(2, 9),
                                name: file.name,
                                type: file.type,
                                size: file.size,
                                category: 'Other',
                                file: file
                              }))
                              setUploadedDocuments(prev => [...prev, ...newDocuments])
                            }}
                          />
                          <label
                            htmlFor="document-upload"
                            className="cursor-pointer flex flex-col items-center space-y-2"
                          >
                            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <span className="text-sm font-medium text-gray-600">
                              Click to upload documents
                            </span>
                            <span className="text-xs text-gray-500">
                              PDF, DOC, TXT, Images, Archives (Max 10MB per file)
                            </span>
                          </label>
                        </div>

                        {/* Uploaded Documents List */}
                        {uploadedDocuments.length > 0 && (
                          <div className="space-y-2">
                            <h5 className="text-sm font-medium">Uploaded Documents</h5>
                            {uploadedDocuments.map((doc) => (
                              <div key={doc.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div className="flex items-center space-x-3">
                                  <div className="flex-shrink-0">
                                    <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                  </div>
                                  <div className="flex-1">
                                    <p className="text-sm font-medium text-gray-900">{doc.name}</p>
                                    <p className="text-xs text-gray-500">
                                      {(doc.size / 1024 / 1024).toFixed(2)} MB
                                    </p>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <select
                                      className="text-xs border rounded px-2 py-1"
                                      value={doc.category}
                                      onChange={(e) => {
                                        const updated = uploadedDocuments.map(d => 
                                          d.id === doc.id ? { ...d, category: e.target.value } : d
                                        )
                                        setUploadedDocuments(updated)
                                      }}
                                    >
                                      <option value="Receipt">Receipt</option>
                                      <option value="Manual">Manual</option>
                                      <option value="Warranty">Warranty</option>
                                      <option value="Registration">Registration</option>
                                      <option value="Invoice">Invoice</option>
                                      <option value="Other">Other</option>
                                    </select>
                                  </div>
                                </div>
                                <button
                                  type="button"
                                  onClick={() => {
                                    const updated = uploadedDocuments.filter(d => d.id !== doc.id)
                                    setUploadedDocuments(updated)
                                  }}
                                  className="text-red-500 hover:text-red-700"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Page 3: Status & Assignment */}
              {currentPage === 3 && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Status & Assignment</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium">Status</label>
                        <select 
                          className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                          value={selectedStatus}
                          onChange={(e) => setSelectedStatus(e.target.value)}
                        >
                          <option value="">Select status...</option>
                          {dropdownData.statusLabels.map((status: any) => (
                            <option key={status.id} value={status.id}>{status.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="text-sm font-medium">Condition</label>
                        <select 
                          className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                          value={selectedCondition}
                          onChange={(e) => setSelectedCondition(e.target.value)}
                        >
                          <option value="">Select condition...</option>
                          {dropdownData.assetConditions.map((condition: any) => (
                            <option key={condition.id} value={condition.id}>{condition.name}</option>
                          ))}
                        </select>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium">Department</label>
                        <select 
                          className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                          value={selectedDepartment}
                          onChange={(e) => setSelectedDepartment(e.target.value)}
                        >
                          <option value="">Select department...</option>
                          {dropdownData.departments.map((dept: any) => (
                            <option key={dept.id} value={dept.id}>{dept.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="text-sm font-medium">Location</label>
                        <select 
                          className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                          value={selectedLocation}
                          onChange={(e) => setSelectedLocation(e.target.value)}
                        >
                          <option value="">Select location...</option>
                          {dropdownData.locations.map((location: any) => (
                            <option key={location.id} value={location.id}>{location.name}</option>
                          ))}
                        </select>
                      </div>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium">Assignment Notes</label>
                      <textarea 
                        className="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1"
                        placeholder="Add any notes about the assignment..."
                        value={assignmentNotes}
                        onChange={(e) => setAssignmentNotes(e.target.value)}
                      />
                    </div>

                    <div className="border-t pt-6 mt-6">
                      <h4 className="text-md font-medium mb-4">Asset Relationships</h4>
                      <p className="text-sm text-muted-foreground mb-4">
                        Connect this asset to other assets for tracking relationships and dependencies.
                      </p>
                      
                      <div className="space-y-3">
                        {connectedAssets.map((asset, index) => (
                          <div key={index} className="grid grid-cols-1 md:grid-cols-4 gap-4 p-4 border rounded-lg">
                            <div>
                              <label className="text-xs text-muted-foreground">Connected Asset</label>
                              <Input 
                                placeholder="Search asset..." 
                                className="mt-1"
                                value={asset.name}
                                onChange={(e) => {
                                  const updated = [...connectedAssets]
                                  updated[index] = { ...updated[index], name: e.target.value }
                                  setConnectedAssets(updated)
                                }}
                              />
                            </div>
                            <div>
                              <label className="text-xs text-muted-foreground">Relationship</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={asset.relationship}
                                onChange={(e) => {
                                  const updated = [...connectedAssets]
                                  updated[index] = { ...updated[index], relationship: e.target.value }
                                  setConnectedAssets(updated)
                                }}
                              >
                                <option value="">Select...</option>
                                <option value="connected-to">Connected to</option>
                                <option value="depends-on">Depends on</option>
                                <option value="supports">Supports</option>
                                <option value="paired-with">Paired with</option>
                                <option value="child-of">Child of</option>
                                <option value="parent-of">Parent of</option>
                              </select>
                            </div>
                            <div className="flex items-end">
                              <Button 
                                type="button"
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  const updated = connectedAssets.filter((_, i) => i !== index)
                                  setConnectedAssets(updated)
                                }}
                                className="w-full"
                              >
                                Remove
                              </Button>
                            </div>
                          </div>
                        ))}
                        
                        <Button 
                          type="button"
                          variant="outline" 
                          onClick={() => {
                            setConnectedAssets([...connectedAssets, { id: '', name: '', relationship: '' }])
                          }}
                          className="w-full"
                        >
                          + Add Asset Connection
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Page 4: Additional Information */}
              {currentPage === 4 && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Additional Information</h3>
                    <p className="text-sm text-muted-foreground">Category-specific technical specifications and features.</p>
                  </div>

                  {/* Desktop Category Specifications */}
                  {isDesktopCategory() && (
                    <div className="space-y-6">
                      {/* Hardware Specifications */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Hardware Specifications</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">CPU/Processor</label>
                            <Input 
                              placeholder="e.g., Intel Core i7-12700K"
                              value={cpu}
                              onChange={(e) => setCpu(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM (GB)</label>
                            <Input 
                              placeholder="e.g., 16"
                              value={ramGb}
                              onChange={(e) => setRamGb(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={ramType}
                              onChange={(e) => setRamType(e.target.value)}
                            >
                              <option value="">Select RAM type...</option>
                              <option value="DDR4">DDR4</option>
                              <option value="DDR5">DDR5</option>
                              <option value="DDR3">DDR3</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">GPU/Graphics Card</label>
                            <Input 
                              placeholder="e.g., NVIDIA RTX 4070"
                              value={gpu}
                              onChange={(e) => setGpu(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Operating System</label>
                            <Input 
                              placeholder="e.g., Windows 11 Pro"
                              value={operatingSystem}
                              onChange={(e) => setOperatingSystem(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Number of Hard Drives</label>
                            <Input 
                              placeholder="e.g., 2"
                              value={numberOfHardDrives}
                              onChange={(e) => {
                                setNumberOfHardDrives(e.target.value)
                                updateStorageDriversCount(e.target.value)
                              }}
                              className="mt-1"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Storage Configuration */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Storage Configuration</h4>
                        <div className="space-y-4">
                          {storageDrivers.map((drive, index) => (
                            <div key={index} className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border rounded-lg">
                              <div>
                                <label className="text-sm font-medium">Drive {index + 1} Type</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={drive.type}
                                  onChange={(e) => updateStorageDrive(index, 'type', e.target.value)}
                                >
                                  <option value="">Select type...</option>
                                  <option value="SSD">SSD</option>
                                  <option value="HDD">HDD</option>
                                  <option value="NVMe">NVMe</option>
                                  <option value="M.2">M.2</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">Size</label>
                                <Input 
                                  placeholder="e.g., 500"
                                  value={drive.size}
                                  onChange={(e) => updateStorageDrive(index, 'size', e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Unit</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={drive.unit}
                                  onChange={(e) => updateStorageDrive(index, 'unit', e.target.value)}
                                >
                                  <option value="GB">GB</option>
                                  <option value="TB">TB</option>
                                </select>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Power Supply */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Power Supply</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">PSU Wattage</label>
                            <Input 
                              placeholder="e.g., 650W"
                              value={psuWattage}
                              onChange={(e) => setPsuWattage(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">PSU Efficiency Rating</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={psuEfficiencyRating}
                              onChange={(e) => setPsuEfficiencyRating(e.target.value)}
                            >
                              <option value="">Select efficiency...</option>
                              <option value="80+ Bronze">80+ Bronze</option>
                              <option value="80+ Silver">80+ Silver</option>
                              <option value="80+ Gold">80+ Gold</option>
                              <option value="80+ Platinum">80+ Platinum</option>
                              <option value="80+ Titanium">80+ Titanium</option>
                            </select>
                          </div>
                        </div>
                      </div>

                      {/* Network Configuration */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Network Configuration</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">MAC Address</label>
                            <Input 
                              placeholder="e.g., 00:1B:44:11:3A:B7"
                              value={macAddress}
                              onChange={(e) => setMacAddress(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Network Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={networkType}
                              onChange={(e) => setNetworkType(e.target.value)}
                            >
                              <option value="DHCP">DHCP</option>
                              <option value="Static">Static IP</option>
                            </select>
                          </div>
                          {networkType === 'Static' && (
                            <div>
                              <label className="text-sm font-medium">Static IP Address</label>
                              <Input 
                                placeholder="e.g., 192.168.1.100"
                                value={staticIpAddress}
                                onChange={(e) => setStaticIpAddress(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          )}
                          <div>
                            <label className="text-sm font-medium">Ethernet Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={ethernetPorts}
                              onChange={(e) => setEthernetPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Ethernet Speed</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={ethernetSpeed}
                              onChange={(e) => setEthernetSpeed(e.target.value)}
                            >
                              <option value="">Select speed...</option>
                              <option value="10 Mbps">10 Mbps</option>
                              <option value="100 Mbps">100 Mbps</option>
                              <option value="1 Gbps">1 Gbps</option>
                              <option value="2.5 Gbps">2.5 Gbps</option>
                              <option value="10 Gbps">10 Gbps</option>
                            </select>
                          </div>
                        </div>

                        {/* WiFi and Bluetooth Configuration */}
                        <div className="mt-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={hasWifi}
                                onChange={(e) => setHasWifi(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Has WiFi</span>
                            </label>
                            
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={hasBluetooth}
                                onChange={(e) => setHasBluetooth(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Has Bluetooth</span>
                            </label>
                          </div>
                          
                          {hasWifi && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                              <div>
                                <label className="text-sm font-medium">WiFi Standard</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={wifiStandard}
                                  onChange={(e) => setWifiStandard(e.target.value)}
                                >
                                  <option value="">Select standard...</option>
                                  <option value="802.11n">802.11n</option>
                                  <option value="802.11ac">802.11ac</option>
                                  <option value="802.11ax (Wi-Fi 6)">802.11ax (Wi-Fi 6)</option>
                                  <option value="802.11be (Wi-Fi 7)">802.11be (Wi-Fi 7)</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">WiFi MAC Address</label>
                                <Input 
                                  placeholder="e.g., 00:1B:44:11:3A:B8"
                                  value={wifiMacAddress}
                                  onChange={(e) => setWifiMacAddress(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          )}
                          
                          {hasBluetooth && (
                            <div className="mt-4">
                              <label className="text-sm font-medium">Bluetooth Version</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1 max-w-xs"
                                value={bluetoothVersion}
                                onChange={(e) => setBluetoothVersion(e.target.value)}
                              >
                                <option value="">Select version...</option>
                                <option value="4.0">4.0</option>
                                <option value="4.1">4.1</option>
                                <option value="4.2">4.2</option>
                                <option value="5.0">5.0</option>
                                <option value="5.1">5.1</option>
                                <option value="5.2">5.2</option>
                                <option value="5.3">5.3</option>
                              </select>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Ports & Connectivity */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Ports & Connectivity</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="text-sm font-medium">USB-A Ports</label>
                            <Input 
                              placeholder="e.g., 4"
                              value={usbAPorts}
                              onChange={(e) => setUsbAPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">USB-C Ports</label>
                            <Input 
                              placeholder="e.g., 2"
                              value={usbCPorts}
                              onChange={(e) => setUsbCPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Thunderbolt Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={thunderboltPorts}
                              onChange={(e) => setThunderboltPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">HDMI Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={hdmiPorts}
                              onChange={(e) => setHdmiPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">DisplayPort Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={displayPortPorts}
                              onChange={(e) => setDisplayPortPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">VGA Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={vgaPorts}
                              onChange={(e) => setVgaPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">DVI Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={dviPorts}
                              onChange={(e) => setDviPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Micro HDMI Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={microHdmiPorts}
                              onChange={(e) => setMicroHdmiPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Optical Drive Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={opticalDriveType}
                              onChange={(e) => setOpticalDriveType(e.target.value)}
                            >
                              <option value="">Select type...</option>
                              <option value="DVD-ROM">DVD-ROM</option>
                              <option value="DVD-RW">DVD-RW</option>
                              <option value="Blu-ray">Blu-ray</option>
                              <option value="None">None</option>
                            </select>
                          </div>
                        </div>

                        {/* Additional Features */}
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasAudioJacks}
                              onChange={(e) => setHasAudioJacks(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has Audio Jacks</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasSdCardReader}
                              onChange={(e) => setHasSdCardReader(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has SD Card Reader</span>
                          </label>
                        </div>
                      </div>

                      {/* Security Features */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Security Features</h4>
                        <div className="space-y-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={bitlockerEnabled}
                              onChange={(e) => setBitlockerEnabled(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">BitLocker Enabled</span>
                          </label>
                          
                          {bitlockerEnabled && (
                            <div>
                              <label className="text-sm font-medium">BitLocker Recovery Key</label>
                              <Input 
                                placeholder="Enter recovery key..."
                                value={bitlockerRecoveryKey}
                                onChange={(e) => setBitlockerRecoveryKey(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Laptop Category Specifications */}
                  {isLaptopCategory() && (
                    <div className="space-y-6">
                      {/* Hardware Specifications */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Hardware Specifications</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">CPU/Processor</label>
                            <Input 
                              placeholder="e.g., Intel Core i7-1260P"
                              value={cpu}
                              onChange={(e) => setCpu(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM (GB)</label>
                            <Input 
                              placeholder="e.g., 16"
                              value={ramGb}
                              onChange={(e) => setRamGb(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={ramType}
                              onChange={(e) => setRamType(e.target.value)}
                            >
                              <option value="">Select RAM type...</option>
                              <option value="DDR4">DDR4</option>
                              <option value="DDR5">DDR5</option>
                              <option value="LPDDR4">LPDDR4</option>
                              <option value="LPDDR5">LPDDR5</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">GPU/Graphics</label>
                            <Input 
                              placeholder="e.g., Intel Iris Xe Graphics"
                              value={gpu}
                              onChange={(e) => setGpu(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Operating System</label>
                            <Input 
                              placeholder="e.g., Windows 11 Home"
                              value={operatingSystem}
                              onChange={(e) => setOperatingSystem(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Storage Configuration */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Storage Configuration</h4>
                        <div className="space-y-4">
                          {storageDrivers.map((drive, index) => (
                            <div key={index} className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border rounded-lg">
                              <div>
                                <label className="text-sm font-medium">Drive {index + 1} Type</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={drive.type}
                                  onChange={(e) => updateStorageDrive(index, 'type', e.target.value)}
                                >
                                  <option value="">Select type...</option>
                                  <option value="SSD">SSD</option>
                                  <option value="NVMe">NVMe</option>
                                  <option value="M.2">M.2</option>
                                  <option value="eMMC">eMMC</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">Size</label>
                                <Input 
                                  placeholder="e.g., 512"
                                  value={drive.size}
                                  onChange={(e) => updateStorageDrive(index, 'size', e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Unit</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={drive.unit}
                                  onChange={(e) => updateStorageDrive(index, 'unit', e.target.value)}
                                >
                                  <option value="GB">GB</option>
                                  <option value="TB">TB</option>
                                </select>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Display & Screen */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Display & Screen</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Screen Size</label>
                            <Input 
                              placeholder="e.g., 15.6 inches"
                              value={screenSize}
                              onChange={(e) => setScreenSize(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Screen Resolution</label>
                            <Input 
                              placeholder="e.g., 1920x1080"
                              value={screenResolution}
                              onChange={(e) => setScreenResolution(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasTouchscreen}
                              onChange={(e) => setHasTouchscreen(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has Touchscreen</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasBacklitKeyboard}
                              onChange={(e) => setHasBacklitKeyboard(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has Backlit Keyboard</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasWebcam}
                              onChange={(e) => setHasWebcam(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has Webcam</span>
                          </label>
                        </div>
                        
                        {/* Webcam Details */}
                        {hasWebcam && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Webcam Resolution</label>
                              <Input 
                                placeholder="e.g., 720p"
                                value={webcamResolution}
                                onChange={(e) => setWebcamResolution(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={hasPrivacyShutter}
                                onChange={(e) => setHasPrivacyShutter(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Has Privacy Shutter</span>
                            </label>
                          </div>
                        )}
                      </div>

                      {/* Battery & Power */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Battery & Power</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Battery Size (Wh)</label>
                            <Input 
                              placeholder="e.g., 56"
                              value={batterySize}
                              onChange={(e) => setBatterySize(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Device Weight (kg)</label>
                            <Input 
                              placeholder="e.g., 1.8"
                              value={deviceWeight}
                              onChange={(e) => setDeviceWeight(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                        
                        <div className="mt-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={batteryRemovable}
                              onChange={(e) => setBatteryRemovable(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Battery Removable</span>
                          </label>
                        </div>
                      </div>



                      {/* Ports & Connectivity */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Ports & Connectivity</h4>
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                          <div>
                            <label className="text-sm font-medium">USB-A Ports</label>
                            <Input 
                              placeholder="e.g., 2"
                              value={usbAPorts}
                              onChange={(e) => setUsbAPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">USB-C Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={usbCPorts}
                              onChange={(e) => setUsbCPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Thunderbolt Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={thunderboltPorts}
                              onChange={(e) => setThunderboltPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Ethernet Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={ethernetPorts}
                              onChange={(e) => setEthernetPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>

                        {/* Additional Features */}
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasAudioJacks}
                              onChange={(e) => setHasAudioJacks(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has Audio Jacks</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasSdCardReader}
                              onChange={(e) => setHasSdCardReader(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has SD Card Reader</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={hasExternalDisplayPorts}
                              onChange={(e) => setHasExternalDisplayPorts(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Has External Display Ports</span>
                          </label>
                        </div>

                        {/* External Display Ports */}
                        {hasExternalDisplayPorts && (
                          <div className="mt-4">
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                              <div>
                                <label className="text-sm font-medium">HDMI Ports</label>
                                <Input 
                                  placeholder="e.g., 1"
                                  value={laptopHdmiPorts}
                                  onChange={(e) => setLaptopHdmiPorts(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">DisplayPort Ports</label>
                                <Input 
                                  placeholder="e.g., 1"
                                  value={laptopDisplayPortPorts}
                                  onChange={(e) => setLaptopDisplayPortPorts(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Micro HDMI Ports</label>
                                <Input 
                                  placeholder="e.g., 1"
                                  value={laptopVgaPorts}
                                  onChange={(e) => setLaptopVgaPorts(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">DVI Ports</label>
                                <Input 
                                  placeholder="e.g., 1"
                                  value={laptopDviPorts}
                                  onChange={(e) => setLaptopDviPorts(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Network Configuration */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Network Configuration</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">MAC Address</label>
                            <Input 
                              placeholder="e.g., 00:1B:44:11:3A:B7"
                              value={macAddress}
                              onChange={(e) => setMacAddress(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Network Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={networkType}
                              onChange={(e) => setNetworkType(e.target.value)}
                            >
                              <option value="DHCP">DHCP</option>
                              <option value="Static">Static IP</option>
                            </select>
                          </div>
                        </div>

                        {/* WiFi and Bluetooth Configuration */}
                        <div className="mt-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={hasWifi}
                                onChange={(e) => setHasWifi(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Has WiFi</span>
                            </label>
                            
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={hasBluetooth}
                                onChange={(e) => setHasBluetooth(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Has Bluetooth</span>
                            </label>
                          </div>
                          
                          {hasWifi && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                              <div>
                                <label className="text-sm font-medium">WiFi Standard</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={wifiStandard}
                                  onChange={(e) => setWifiStandard(e.target.value)}
                                >
                                  <option value="">Select standard...</option>
                                  <option value="802.11n">802.11n</option>
                                  <option value="802.11ac">802.11ac</option>
                                  <option value="802.11ax (Wi-Fi 6)">802.11ax (Wi-Fi 6)</option>
                                  <option value="802.11be (Wi-Fi 7)">802.11be (Wi-Fi 7)</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">WiFi MAC Address</label>
                                <Input 
                                  placeholder="e.g., 00:1B:44:11:3A:B8"
                                  value={wifiMacAddress}
                                  onChange={(e) => setWifiMacAddress(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          )}
                          
                          {hasBluetooth && (
                            <div className="mt-4">
                              <label className="text-sm font-medium">Bluetooth Version</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1 max-w-xs"
                                value={bluetoothVersion}
                                onChange={(e) => setBluetoothVersion(e.target.value)}
                              >
                                <option value="">Select version...</option>
                                <option value="4.0">4.0</option>
                                <option value="4.1">4.1</option>
                                <option value="4.2">4.2</option>
                                <option value="5.0">5.0</option>
                                <option value="5.1">5.1</option>
                                <option value="5.2">5.2</option>
                                <option value="5.3">5.3</option>
                              </select>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Security Features */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Security Features</h4>
                        <div className="space-y-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={bitlockerEnabled}
                              onChange={(e) => setBitlockerEnabled(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">BitLocker Enabled</span>
                          </label>
                          
                          {bitlockerEnabled && (
                            <div>
                              <label className="text-sm font-medium">BitLocker Recovery Key</label>
                              <Input 
                                placeholder="Enter recovery key..."
                                value={bitlockerRecoveryKey}
                                onChange={(e) => setBitlockerRecoveryKey(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Monitor Category Specifications */}
                  {isMonitorCategory() && (
                    <div className="space-y-6">
                      {/* Display Specifications */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Display Specifications</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Screen Size</label>
                            <Input 
                              placeholder="e.g., 27 inches"
                              value={monitorScreenSize}
                              onChange={(e) => setMonitorScreenSize(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Resolution</label>
                            <Input 
                              placeholder="e.g., 2560x1440"
                              value={monitorResolution}
                              onChange={(e) => setMonitorResolution(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Panel Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={monitorPanelType}
                              onChange={(e) => setMonitorPanelType(e.target.value)}
                            >
                              <option value="">Select panel type...</option>
                              <option value="IPS">IPS</option>
                              <option value="VA">VA</option>
                              <option value="TN">TN</option>
                              <option value="OLED">OLED</option>
                              <option value="QLED">QLED</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">Aspect Ratio</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={monitorAspectRatio}
                              onChange={(e) => setMonitorAspectRatio(e.target.value)}
                            >
                              <option value="">Select aspect ratio...</option>
                              <option value="16:9">16:9</option>
                              <option value="16:10">16:10</option>
                              <option value="21:9">21:9 (Ultrawide)</option>
                              <option value="32:9">32:9 (Super Ultrawide)</option>
                              <option value="4:3">4:3</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">Refresh Rate (Hz)</label>
                            <Input 
                              type="number"
                              placeholder="e.g., 60"
                              value={monitorRefreshRate}
                              onChange={(e) => setMonitorRefreshRate(e.target.value)}
                              className="mt-1"
                              min="1"
                              max="1000"
                            />
                          </div>
                          <div>
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={monitorCurvedScreen}
                                onChange={(e) => setMonitorCurvedScreen(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Curved Screen</span>
                            </label>
                          </div>
                        </div>
                        
                        {/* Curvature field only shows when curved screen is enabled */}
                        {monitorCurvedScreen && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div>
                              <label className="text-sm font-medium">Curvature</label>
                              <Input 
                                placeholder="e.g., 1800R"
                                value={monitorCurvature}
                                onChange={(e) => setMonitorCurvature(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Connectivity & Ports */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Connectivity & Ports</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="text-sm font-medium">HDMI Ports</label>
                            <Input 
                              placeholder="e.g., 2"
                              value={monitorHdmiPorts}
                              onChange={(e) => setMonitorHdmiPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">DisplayPort Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={monitorDisplayPortPorts}
                              onChange={(e) => setMonitorDisplayPortPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">USB-C Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={monitorUsbCPorts}
                              onChange={(e) => setMonitorUsbCPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">VGA Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={monitorVgaPorts}
                              onChange={(e) => setMonitorVgaPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">DVI Ports</label>
                            <Input 
                              placeholder="e.g., 1"
                              value={monitorDviPorts}
                              onChange={(e) => setMonitorDviPorts(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                        
                        {/* USB-C Power Delivery */}
                        {monitorUsbCPorts && parseInt(monitorUsbCPorts) > 0 && (
                          <div className="mt-4">
                            <label className="text-sm font-medium">USB-C Power Delivery (W)</label>
                            <Input 
                              placeholder="e.g., 65"
                              value={monitorUsbCPowerDelivery}
                              onChange={(e) => setMonitorUsbCPowerDelivery(e.target.value)}
                              className="mt-1 max-w-xs"
                            />
                          </div>
                        )}
                      </div>

                      {/* USB Hub & Additional Features */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">USB Hub & Additional Features</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorBuiltInUsbHub}
                              onChange={(e) => setMonitorBuiltInUsbHub(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Built-in USB Hub</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorBuiltInSpeakers}
                              onChange={(e) => setMonitorBuiltInSpeakers(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Built-in Speakers</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorBuiltInWebcam}
                              onChange={(e) => setMonitorBuiltInWebcam(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Built-in Webcam</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorActsAsDock}
                              onChange={(e) => setMonitorActsAsDock(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Laptop Dock</span>
                          </label>
                        </div>
                        
                        {/* USB Hub Configuration */}
                        {monitorBuiltInUsbHub && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <label className="text-sm font-medium">USB Hub Type</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={monitorUsbHubType}
                                onChange={(e) => setMonitorUsbHubType(e.target.value)}
                              >
                                <option value="">Select type...</option>
                                <option value="USB-B">USB-B Upstream</option>
                                <option value="USB-C">USB-C Upstream</option>
                              </select>
                            </div>
                            <div>
                              <label className="text-sm font-medium">USB-A Downstream Ports</label>
                              <Input 
                                placeholder="e.g., 4"
                                value={monitorUsbADownstreamPorts}
                                onChange={(e) => setMonitorUsbADownstreamPorts(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                        
                        {/* Webcam Configuration */}
                        {monitorBuiltInWebcam && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Webcam Resolution</label>
                              <Input 
                                placeholder="e.g., 1080p"
                                value={monitorWebcamResolution}
                                onChange={(e) => setMonitorWebcamResolution(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={monitorWebcamPrivacyShutter}
                                onChange={(e) => setMonitorWebcamPrivacyShutter(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Privacy Shutter</span>
                            </label>
                          </div>
                        )}
                        
                        {/* Dock Configuration */}
                        {monitorActsAsDock && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Dock Connection Type</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={monitorDockConnectionType}
                                onChange={(e) => setMonitorDockConnectionType(e.target.value)}
                              >
                                <option value="">Select connection type...</option>
                                <option value="USB-C">USB-C</option>
                                <option value="Thunderbolt">Thunderbolt</option>
                              </select>
                            </div>
                            
                            <label className="flex items-center">
                              <input 
                                type="checkbox"
                                checked={monitorDockEthernet}
                                onChange={(e) => setMonitorDockEthernet(e.target.checked)}
                                className="mr-2"
                              />
                              <span className="text-sm font-medium">Ethernet</span>
                            </label>
                          </div>
                        )}
                      </div>



                      {/* Stand & Mounting */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Stand & Mounting</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorHeightAdjust}
                              onChange={(e) => setMonitorHeightAdjust(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Height Adjustable</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorTilt}
                              onChange={(e) => setMonitorTilt(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Tilt Adjustable</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorSwivel}
                              onChange={(e) => setMonitorSwivel(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Swivel Adjustable</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorPivot}
                              onChange={(e) => setMonitorPivot(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Pivot (Portrait Mode)</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={monitorVesaMount}
                              onChange={(e) => setMonitorVesaMount(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">VESA Mount Compatible</span>
                          </label>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Phone Category Specifications */}
                  {isPhoneCategory() && (
                    <div className="space-y-6">
                      {/* Device Information */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Device Information</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="text-sm font-medium">Screen Size</label>
                            <Input 
                              placeholder="e.g., 6.1 inches"
                              value={phoneScreenSize}
                              onChange={(e) => setPhoneScreenSize(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Operating System</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneOperatingSystem}
                              onChange={(e) => setPhoneOperatingSystem(e.target.value)}
                            >
                              <option value="">Select OS...</option>
                              <option value="iOS">iOS</option>
                              <option value="Android">Android</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">OS Version</label>
                            <Input 
                              placeholder="e.g., 17.1"
                              value={phoneOsVersion}
                              onChange={(e) => setPhoneOsVersion(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Hardware Specifications */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Hardware Specifications</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Processor</label>
                            <Input 
                              placeholder="e.g., A17 Pro"
                              value={phoneProcessor}
                              onChange={(e) => setPhoneProcessor(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM</label>
                            <Input 
                              placeholder="e.g., 8GB"
                              value={phoneRam}
                              onChange={(e) => setPhoneRam(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Storage</label>
                            <Input 
                              placeholder="e.g., 256GB"
                              value={phoneStorage}
                              onChange={(e) => setPhoneStorage(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Storage Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneStorageType}
                              onChange={(e) => setPhoneStorageType(e.target.value)}
                            >
                              <option value="">Select type...</option>
                              <option value="UFS">UFS</option>
                              <option value="eMMC">eMMC</option>
                              <option value="NVMe">NVMe</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                        </div>
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Battery Capacity</label>
                            <Input 
                              placeholder="e.g., 3279 mAh"
                              value={phoneBatteryCapacity}
                              onChange={(e) => setBatteryCapacity(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          
                          <div>
                            <label className="text-sm font-medium">Charger Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={chargerType}
                              onChange={(e) => setChargerType(e.target.value)}
                            >
                              <option value="">Select charger type...</option>
                              <option value="Lightning">Lightning</option>
                              <option value="USB-C">USB-C</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                        </div>
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneExpandableStorage}
                              onChange={(e) => setPhoneExpandableStorage(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Expandable Storage</span>
                          </label>
                          
                          {phoneExpandableStorage && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Storage Type</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={phoneExpandableStorageType}
                                  onChange={(e) => setPhoneExpandableStorageType(e.target.value)}
                                >
                                  <option value="">Select storage type...</option>
                                  <option value="SD">SD Card</option>
                                  <option value="microSD">microSD Card</option>
                                  <option value="SSD">SSD</option>
                                  <option value="HDD">HDD</option>
                                  <option value="USB">USB Drive</option>
                                  <option value="Other">Other</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">Max Expandable Storage</label>
                                <Input 
                                  placeholder="e.g., 1TB"
                                  value={phoneMaxExpandableStorage}
                                  onChange={(e) => setPhoneMaxExpandableStorage(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Network & Connectivity */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Network & Connectivity</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Network Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneNetworkType}
                              onChange={(e) => setPhoneNetworkType(e.target.value)}
                            >
                              <option value="">Select network type...</option>
                              <option value="5G">5G</option>
                              <option value="4G LTE">4G LTE</option>
                              <option value="3G">3G</option>
                              <option value="Wi-Fi Only">Wi-Fi Only</option>
                            </select>
                          </div>
                          
                          {isCellularNetworkSelected() && (
                            <div>
                              <label className="text-sm font-medium">SIM Type</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={phoneSimType}
                                onChange={(e) => setPhoneSimType(e.target.value)}
                              >
                                <option value="">Select SIM type...</option>
                                <option value="Nano SIM">Nano SIM</option>
                                <option value="eSIM">eSIM</option>
                                <option value="Dual SIM">Dual SIM</option>
                                <option value="No SIM">No SIM</option>
                              </select>
                            </div>
                          )}
                        </div>
                        
                        {/* Carrier and Carrier Lock for Cellular Networks */}
                        {isCellularNetworkSelected() && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Carrier</label>
                              <Input 
                                placeholder="e.g., Verizon"
                                value={phoneCarrier}
                                onChange={(e) => setPhoneCarrier(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <div className="flex items-center justify-center">
                              <label className="flex items-center">
                                <input 
                                  type="checkbox"
                                  checked={phoneCarrierLocked}
                                  onChange={(e) => setPhoneCarrierLocked(e.target.checked)}
                                  className="mr-2"
                                />
                                <span className="text-sm font-medium">Carrier Locked</span>
                              </label>
                            </div>
                          </div>
                        )}
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasWifi}
                              onChange={(e) => setPhoneHasWifi(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Wi-Fi</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasBluetooth}
                              onChange={(e) => setPhoneHasBluetooth(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Bluetooth</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasGps}
                              onChange={(e) => setPhoneHasGps(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">GPS</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasNfc}
                              onChange={(e) => setPhoneHasNfc(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">NFC</span>
                          </label>
                        </div>
                        
                        {/* WiFi Details */}
                        {phoneHasWifi && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">WiFi Technology</label>
                              <Input 
                                placeholder="e.g., 802.11ax (Wi-Fi 6)"
                                value={phoneWifiTechnology}
                                onChange={(e) => setPhoneWifiTechnology(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            <div>
                              <label className="text-sm font-medium">WiFi MAC Address</label>
                              <Input 
                                placeholder="e.g., 00:1B:44:11:3A:B7"
                                value={phoneWifiMacAddress}
                                onChange={(e) => setPhoneWifiMacAddress(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                        
                        {/* Bluetooth MAC Address */}
                        {phoneHasBluetooth && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Bluetooth MAC Address</label>
                              <Input 
                                placeholder="e.g., 00:1B:44:11:3A:B8"
                                value={phoneBluetoothMacAddress}
                                onChange={(e) => setPhoneBluetoothMacAddress(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                        
                        {isCellularNetworkSelected() && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <label className="text-sm font-medium">IMEI</label>
                              <Input 
                                placeholder="e.g., 123456789012345"
                                value={phoneImei}
                                onChange={(e) => setPhoneImei(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <div>
                              <label className="text-sm font-medium">Phone Number</label>
                              <Input 
                                placeholder="e.g., (555) 123-4567"
                                value={phoneNumber}
                                onChange={(e) => setPhoneNumber(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <div>
                              <label className="text-sm font-medium">SIM Number</label>
                              <Input 
                                placeholder="e.g., 89012345678901234567"
                                value={simNumber}
                                onChange={(e) => setSimNumber(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Security & Biometrics */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Security & Biometrics</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasFingerprint}
                              onChange={(e) => setPhoneHasFingerprint(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Fingerprint Scanner</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasFaceRecognition}
                              onChange={(e) => setPhoneHasFaceRecognition(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Face Recognition</span>
                          </label>
                        </div>
                      </div>

                      {/* Camera & Physical */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Camera & Physical</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Rear Camera</label>
                            <Input 
                              placeholder="e.g., 48MP"
                              value={phoneRearCamera}
                              onChange={(e) => setPhoneRearCamera(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Front Camera</label>
                            <Input 
                              placeholder="e.g., 12MP"
                              value={phoneFrontCamera}
                              onChange={(e) => setPhoneFrontCamera(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Color</label>
                            <Input 
                              placeholder="e.g., Blue"
                              value={phoneColor}
                              onChange={(e) => setPhoneColor(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                        
                        {/* Multiple Camera Lenses */}
                        <div className="mt-4">
                          <label className="text-sm font-medium">Additional Camera Lenses</label>
                          <div className="mt-2 space-y-2">
                            {cameraLenses.map((lens, index) => (
                              <div key={index} className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                <Input 
                                  placeholder="e.g., Ultra Wide"
                                  value={lens.name}
                                  onChange={(e) => {
                                    const newLenses = [...cameraLenses];
                                    newLenses[index].name = e.target.value;
                                    setCameraLenses(newLenses);
                                  }}
                                  className="flex-1"
                                />
                                <div className="flex items-center gap-2">
                                  <Input 
                                    placeholder="e.g., 12MP f/2.4"
                                    value={lens.specs}
                                    onChange={(e) => {
                                      const newLenses = [...cameraLenses];
                                      newLenses[index].specs = e.target.value;
                                      setCameraLenses(newLenses);
                                    }}
                                    className="flex-1"
                                  />
                                  <button 
                                    type="button"
                                    onClick={() => {
                                      const newLenses = cameraLenses.filter((_, i) => i !== index);
                                      setCameraLenses(newLenses);
                                    }}
                                    className="text-red-500 hover:text-red-700"
                                  >
                                    Remove
                                  </button>
                                </div>
                              </div>
                            ))}
                            <button 
                              type="button"
                              onClick={() => setCameraLenses([...cameraLenses, {name: '', specs: ''}])}
                              className="text-blue-500 hover:text-blue-700"
                            >
                              Add Camera Lens
                            </button>
                          </div>
                        </div>
                      </div>

                      {/* Mobile Device Management (MDM) */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Mobile Device Management (MDM)</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInAppleBusinessManager}
                              onChange={(e) => setIsInAppleBusinessManager(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Apple Business Manager</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInIntune}
                              onChange={(e) => setIsInIntune(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Microsoft Intune</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInMosyle}
                              onChange={(e) => setIsInMosyle(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Mosyle</span>
                          </label>
                        </div>
                        
                        {/* Apple Business Manager Details */}
                        {isInAppleBusinessManager && (
                          <div className="mt-4 space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Device Management Service</label>
                                <Input 
                                  placeholder="e.g., Mosyle, Jamf, etc."
                                  value={abmDeviceManagementService}
                                  onChange={(e) => setAbmDeviceManagementService(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Source of Addition</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={abmSourceOfAddition}
                                  onChange={(e) => setAbmSourceOfAddition(e.target.value)}
                                >
                                  <option value="">Select source...</option>
                                  <option value="Apple Configuration">Apple Configuration</option>
                                  <option value="Verizon Wireless">Verizon Wireless</option>
                                  <option value="AT&T">AT&T</option>
                                  <option value="SHI">SHI</option>
                                  <option value="CDW">CDW</option>
                                </select>
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Order Number</label>
                                <Input 
                                  placeholder="e.g., ABM-2024-001"
                                  value={abmOrderNumber}
                                  onChange={(e) => setAbmOrderNumber(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <label className="flex items-center">
                                <input 
                                  type="checkbox"
                                  checked={abmActivationLock}
                                  onChange={(e) => setAbmActivationLock(e.target.checked)}
                                  className="mr-2"
                                />
                                <span className="text-sm font-medium">Activation Lock</span>
                              </label>
                            </div>
                          </div>
                        )}
                        
                        {/* Intune Details */}
                        {isInIntune && (
                          <div className="mt-4 space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Management Name</label>
                                <Input 
                                  placeholder="e.g., Company Intune"
                                  value={intuneManagementName}
                                  onChange={(e) => setIntuneManagementName(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Primary User</label>
                                <Input 
                                  placeholder="e.g., john.doe@company.com"
                                  value={intunePrimaryUser}
                                  onChange={(e) => setIntunePrimaryUser(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Remote Assistance Software</label>
                                <Input 
                                  placeholder="e.g., TeamViewer, N-Able, Mosyle"
                                  value={intuneRemoteAssistance}
                                  onChange={(e) => setIntuneRemoteAssistance(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Device Compliance Policies</label>
                                <div className="mt-1 space-y-2">
                                  {intuneDeviceCompliancePolicies.map((policy, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                      <Input 
                                        placeholder="e.g., Require device encryption"
                                        value={policy}
                                        onChange={(e) => {
                                          const newPolicies = [...intuneDeviceCompliancePolicies];
                                          newPolicies[index] = e.target.value;
                                          setIntuneDeviceCompliancePolicies(newPolicies);
                                        }}
                                        className="flex-1"
                                      />
                                      <button 
                                        type="button"
                                        onClick={() => {
                                          const newPolicies = intuneDeviceCompliancePolicies.filter((_, i) => i !== index);
                                          setIntuneDeviceCompliancePolicies(newPolicies);
                                        }}
                                        className="text-red-500 hover:text-red-700"
                                      >
                                        Remove
                                      </button>
                                    </div>
                                  ))}
                                  <button 
                                    type="button"
                                    onClick={() => setIntuneDeviceCompliancePolicies([...intuneDeviceCompliancePolicies, ''])}
                                    className="text-blue-500 hover:text-blue-700"
                                  >
                                    Add Device Compliance Policy
                                  </button>
                                </div>
                              </div>
                              
                              <div>
                                <label className="text-sm font-medium">Device Configuration Policies</label>
                                <div className="mt-1 space-y-2">
                                  {intuneDeviceConfigPolicies.map((policy, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                      <Input 
                                        placeholder="e.g., WiFi configuration"
                                        value={policy}
                                        onChange={(e) => {
                                          const newPolicies = [...intuneDeviceConfigPolicies];
                                          newPolicies[index] = e.target.value;
                                          setIntuneDeviceConfigPolicies(newPolicies);
                                        }}
                                        className="flex-1"
                                      />
                                      <button 
                                        type="button"
                                        onClick={() => {
                                          const newPolicies = intuneDeviceConfigPolicies.filter((_, i) => i !== index);
                                          setIntuneDeviceConfigPolicies(newPolicies);
                                        }}
                                        className="text-red-500 hover:text-red-700"
                                      >
                                        Remove
                                      </button>
                                    </div>
                                  ))}
                                  <button 
                                    type="button"
                                    onClick={() => setIntuneDeviceConfigPolicies([...intuneDeviceConfigPolicies, ''])}
                                    className="text-blue-500 hover:text-blue-700"
                                  >
                                    Add Device Configuration Policy
                                      </button>
                                    </div>
                                    
                                    <div className="mt-4">
                                      <label className="text-sm font-medium">Group Membership</label>
                                      <div className="mt-1 space-y-2">
                                        {intuneGroupMemberships.map((group, index) => (
                                          <div key={index} className="flex items-center gap-2">
                                            <Input 
                                              placeholder="e.g., IT Department"
                                              value={group}
                                              onChange={(e) => {
                                                const newGroups = [...intuneGroupMemberships];
                                                newGroups[index] = e.target.value;
                                                setIntuneGroupMemberships(newGroups);
                                              }}
                                              className="flex-1"
                                            />
                                            <button 
                                              type="button"
                                              onClick={() => {
                                                const newGroups = intuneGroupMemberships.filter((_, i) => i !== index);
                                                setIntuneGroupMemberships(newGroups);
                                              }}
                                              className="text-red-500 hover:text-red-700"
                                            >
                                              Remove
                                            </button>
                                          </div>
                                        ))}
                                        <button 
                                          type="button"
                                          onClick={() => setIntuneGroupMemberships([...intuneGroupMemberships, ''])}
                                          className="text-blue-500 hover:text-blue-700"
                                        >
                                          Add Group
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                
                                <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
                                  <div>
                                    <label className="text-sm font-medium">App Configuration Policies</label>
                                    <div className="mt-1 space-y-2">
                                      {intuneAppConfigPolicies.map((policy, index) => (
                                        <div key={index} className="flex items-center gap-2">
                                          <Input 
                                            placeholder="e.g., Office 365 configuration"
                                            value={policy}
                                            onChange={(e) => {
                                              const newPolicies = [...intuneAppConfigPolicies];
                                              newPolicies[index] = e.target.value;
                                              setIntuneAppConfigPolicies(newPolicies);
                                            }}
                                            className="flex-1"
                                          />
                                          <button 
                                            type="button"
                                            onClick={() => {
                                              const newPolicies = intuneAppConfigPolicies.filter((_, i) => i !== index);
                                              setIntuneAppConfigPolicies(newPolicies);
                                            }}
                                            className="text-red-500 hover:text-red-700"
                                          >
                                            Remove
                                          </button>
                                        </div>
                                      ))}
                                      <button 
                                        type="button"
                                        onClick={() => setIntuneAppConfigPolicies([...intuneAppConfigPolicies, ''])}
                                        className="text-blue-500 hover:text-blue-700"
                                      >
                                        Add App Configuration Policy
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                            
                            {/* Separator between MDM sections */}
                            {(isInAppleBusinessManager || isInIntune) && isInMosyle && (
                              <hr className="my-4 border-gray-200" />
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Tablet Category Specifications */}
                  {isTabletCategory() && (
                    <div className="space-y-6">
                      {/* Device Information */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Device Information</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="text-sm font-medium">Screen Size</label>
                            <Input 
                              placeholder="e.g., 11 inches"
                              value={phoneScreenSize}
                              onChange={(e) => setPhoneScreenSize(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Operating System</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneOperatingSystem}
                              onChange={(e) => setPhoneOperatingSystem(e.target.value)}
                            >
                              <option value="">Select OS...</option>
                              <option value="iOS">iOS</option>
                              <option value="iPadOS">iPadOS</option>
                              <option value="Android">Android</option>
                              <option value="Windows">Windows</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium">OS Version</label>
                            <Input 
                              placeholder="e.g., 17.1"
                              value={phoneOsVersion}
                              onChange={(e) => setPhoneOsVersion(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Hardware Specifications */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Hardware Specifications</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Processor</label>
                            <Input 
                              placeholder="e.g., M2"
                              value={phoneProcessor}
                              onChange={(e) => setPhoneProcessor(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">RAM</label>
                            <Input 
                              placeholder="e.g., 8GB"
                              value={phoneRam}
                              onChange={(e) => setPhoneRam(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Storage</label>
                            <Input 
                              placeholder="e.g., 256GB"
                              value={phoneStorage}
                              onChange={(e) => setPhoneStorage(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Storage Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneStorageType}
                              onChange={(e) => setPhoneStorageType(e.target.value)}
                            >
                              <option value="">Select type...</option>
                              <option value="SSD">SSD</option>
                              <option value="UFS">UFS</option>
                              <option value="eMMC">eMMC</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                        </div>
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Battery Capacity</label>
                            <Input 
                              placeholder="e.g., 7538 mAh"
                              value={phoneBatteryCapacity}
                              onChange={(e) => setBatteryCapacity(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          
                          <div>
                            <label className="text-sm font-medium">Charger Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={chargerType}
                              onChange={(e) => setChargerType(e.target.value)}
                            >
                              <option value="">Select charger type...</option>
                              <option value="Lightning">Lightning</option>
                              <option value="USB-C">USB-C</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                        </div>
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneExpandableStorage}
                              onChange={(e) => setPhoneExpandableStorage(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Expandable Storage</span>
                          </label>
                          
                          {phoneExpandableStorage && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Storage Type</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={phoneExpandableStorageType}
                                  onChange={(e) => setPhoneExpandableStorageType(e.target.value)}
                                >
                                  <option value="">Select storage type...</option>
                                  <option value="SD">SD Card</option>
                                  <option value="microSD">microSD Card</option>
                                  <option value="SSD">SSD</option>
                                  <option value="HDD">HDD</option>
                                  <option value="USB">USB Drive</option>
                                  <option value="Other">Other</option>
                                </select>
                              </div>
                              <div>
                                <label className="text-sm font-medium">Max Expandable Storage</label>
                                <Input 
                                  placeholder="e.g., 2TB"
                                  value={phoneMaxExpandableStorage}
                                  onChange={(e) => setPhoneMaxExpandableStorage(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Network & Connectivity */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Network & Connectivity</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Network Type</label>
                            <select 
                              className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                              value={phoneNetworkType}
                              onChange={(e) => setPhoneNetworkType(e.target.value)}
                            >
                              <option value="">Select network type...</option>
                              <option value="5G">5G (Cellular)</option>
                              <option value="4G LTE">4G LTE (Cellular)</option>
                              <option value="Wi-Fi Only">Wi-Fi Only</option>
                            </select>
                          </div>
                          
                          {isCellularNetworkSelected() && (
                            <div>
                              <label className="text-sm font-medium">SIM Type</label>
                              <select 
                                className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                value={phoneSimType}
                                onChange={(e) => setPhoneSimType(e.target.value)}
                              >
                                <option value="">Select SIM type...</option>
                                <option value="Nano SIM">Nano SIM</option>
                                <option value="eSIM">eSIM</option>
                                <option value="No SIM">No SIM</option>
                              </select>
                            </div>
                          )}
                        </div>
                        
                        {/* Carrier and Carrier Lock for Cellular Networks */}
                        {isCellularNetworkSelected() && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Carrier</label>
                              <Input 
                                placeholder="e.g., Verizon"
                                value={phoneCarrier}
                                onChange={(e) => setPhoneCarrier(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            
                            <div className="flex items-center justify-center">
                              <label className="flex items-center">
                                <input 
                                  type="checkbox"
                                  checked={phoneCarrierLocked}
                                  onChange={(e) => setPhoneCarrierLocked(e.target.checked)}
                                  className="mr-2"
                                />
                                <span className="text-sm font-medium">Carrier Locked</span>
                              </label>
                            </div>
                          </div>
                        )}
                        
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasWifi}
                              onChange={(e) => setPhoneHasWifi(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Wi-Fi</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasBluetooth}
                              onChange={(e) => setPhoneHasBluetooth(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Bluetooth</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasGps}
                              onChange={(e) => setPhoneHasGps(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">GPS</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasNfc}
                              onChange={(e) => setPhoneHasNfc(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">NFC</span>
                          </label>
                        </div>
                        
                        {/* WiFi Details */}
                        {phoneHasWifi && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">WiFi Technology</label>
                              <Input 
                                placeholder="e.g., 802.11ax (Wi-Fi 6)"
                                value={phoneWifiTechnology}
                                onChange={(e) => setPhoneWifiTechnology(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                            <div>
                              <label className="text-sm font-medium">WiFi MAC Address</label>
                              <Input 
                                placeholder="e.g., 00:1B:44:11:3A:B7"
                                value={phoneWifiMacAddress}
                                onChange={(e) => setPhoneWifiMacAddress(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                        
                        {/* Bluetooth MAC Address */}
                        {phoneHasBluetooth && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="text-sm font-medium">Bluetooth MAC Address</label>
                              <Input 
                                placeholder="e.g., 00:1B:44:11:3A:B8"
                                value={phoneBluetoothMacAddress}
                                onChange={(e) => setPhoneBluetoothMacAddress(e.target.value)}
                                className="mt-1"
                              />
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Security & Biometrics */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Security & Biometrics</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasFingerprint}
                              onChange={(e) => setPhoneHasFingerprint(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Fingerprint Scanner</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={phoneHasFaceRecognition}
                              onChange={(e) => setPhoneHasFaceRecognition(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Face Recognition</span>
                          </label>
                        </div>
                      </div>

                      {/* Camera & Physical */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Camera & Physical</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium">Rear Camera</label>
                            <Input 
                              placeholder="e.g., 12MP"
                              value={phoneRearCamera}
                              onChange={(e) => setPhoneRearCamera(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Front Camera</label>
                            <Input 
                              placeholder="e.g., 12MP"
                              value={phoneFrontCamera}
                              onChange={(e) => setPhoneFrontCamera(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">Color</label>
                            <Input 
                              placeholder="e.g., Space Gray"
                              value={phoneColor}
                              onChange={(e) => setPhoneColor(e.target.value)}
                              className="mt-1"
                            />
                          </div>
                        </div>
                        
                        {/* Multiple Camera Lenses */}
                        <div className="mt-4">
                          <label className="text-sm font-medium">Additional Camera Lenses</label>
                          <div className="mt-2 space-y-2">
                            {cameraLenses.map((lens, index) => (
                              <div key={index} className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                <Input 
                                  placeholder="e.g., Ultra Wide"
                                  value={lens.name}
                                  onChange={(e) => {
                                    const newLenses = [...cameraLenses];
                                    newLenses[index].name = e.target.value;
                                    setCameraLenses(newLenses);
                                  }}
                                  className="flex-1"
                                />
                                <div className="flex items-center gap-2">
                                  <Input 
                                    placeholder="e.g., 12MP f/2.4"
                                    value={lens.specs}
                                    onChange={(e) => {
                                      const newLenses = [...cameraLenses];
                                      newLenses[index].specs = e.target.value;
                                      setCameraLenses(newLenses);
                                    }}
                                    className="flex-1"
                                  />
                                  <button 
                                    type="button"
                                    onClick={() => {
                                      const newLenses = cameraLenses.filter((_, i) => i !== index);
                                      setCameraLenses(newLenses);
                                    }}
                                    className="text-red-500 hover:text-red-700"
                                  >
                                    Remove
                                  </button>
                                </div>
                              </div>
                            ))}
                            <button 
                              type="button"
                              onClick={() => setCameraLenses([...cameraLenses, {name: '', specs: ''}])}
                              className="text-blue-500 hover:text-blue-700"
                            >
                              Add Camera Lens
                            </button>
                          </div>
                        </div>
                      </div>

                      {/* Mobile Device Management (MDM) */}
                      <div className="border-t pt-6 mt-6">
                        <h4 className="text-md font-medium mb-4">Mobile Device Management (MDM)</h4>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInAppleBusinessManager}
                              onChange={(e) => setIsInAppleBusinessManager(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Apple Business Manager</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInIntune}
                              onChange={(e) => setIsInIntune(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Microsoft Intune</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input 
                              type="checkbox"
                              checked={isInMosyle}
                              onChange={(e) => setIsInMosyle(e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm font-medium">Mosyle</span>
                          </label>
                        </div>
                        
                        {/* Apple Business Manager Details */}
                        {isInAppleBusinessManager && (
                          <div className="mt-4 space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Device Management Service</label>
                                <Input 
                                  placeholder="e.g., Mosyle, Jamf, etc."
                                  value={abmDeviceManagementService}
                                  onChange={(e) => setAbmDeviceManagementService(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <div>
                                <label className="text-sm font-medium">Source of Addition</label>
                                <select 
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm mt-1"
                                  value={abmSourceOfAddition}
                                  onChange={(e) => setAbmSourceOfAddition(e.target.value)}
                                >
                                  <option value="">Select source...</option>
                                  <option value="Apple Configuration">Apple Configuration</option>
                                  <option value="Verizon Wireless">Verizon Wireless</option>
                                  <option value="AT&T">AT&T</option>
                                  <option value="SHI">SHI</option>
                                  <option value="CDW">CDW</option>
                                </select>
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium">Order Number</label>
                                <Input 
                                  placeholder="e.g., ABM-2024-001"
                                  value={abmOrderNumber}
                                  onChange={(e) => setAbmOrderNumber(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                              <label className="flex items-center">
                                <input 
                                  type="checkbox"
                                  checked={abmActivationLock}
                                  onChange={(e) => setAbmActivationLock(e.target.checked)}
                                  className="mr-2"
                                />
                                <span className="text-sm font-medium">Activation Lock</span>
                              </label>
                            </div>
                          </div>
                        )}
                        

                        
                        {/* Separator between MDM sections */}
                        {(isInAppleBusinessManager || isInIntune) && isInMosyle && (
                          <hr className="my-4 border-gray-200" />
                        )}
                      </div>
                    </div>
                  )}

                  {/* Default message for other categories */}
                  {!isDesktopCategory() && !isLaptopCategory() && !isMonitorCategory() && !isPhoneCategory() && !isTabletCategory() && (
                    <div className="border-t pt-6 mt-6">
                      <p className="text-sm text-muted-foreground">
                        Additional specifications for this category will be available in future updates.
                      </p>
                    </div>
                  )}
                </div>
              )}
            </form>
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex items-center justify-between">
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={handlePrevPage}
              disabled={currentPage === 1}
            >
              Previous
            </Button>
            <Button variant="outline" onClick={() => router.push('/assets')}>
              Cancel
            </Button>
          </div>
          
          <div className="flex gap-2">
            {currentPage < totalPages ? (
              <Button 
                onClick={handleNextPage}
                disabled={!isPageValid()}
              >
                Next
              </Button>
            ) : (
              <Button onClick={() => console.log('Create asset')}>
                Add Asset
              </Button>
            )}
          </div>
        </div>
      </div>
    </>
  )
} 