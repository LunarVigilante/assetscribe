generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manufacturer {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  website      String?
  support_url  String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  asset_models AssetModel[]
  consumables  Consumable[]
  licenses     License[]

  @@map("manufacturers")
}

model Category {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  asset_models AssetModel[]
  consumables  Consumable[]

  @@map("categories")
}

model Supplier {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  contact_info String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  assets       Asset[]

  @@map("suppliers")
}

model StatusLabel {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  color               String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  assets              Asset[]
  configuration_items ConfigurationItem[]

  @@map("status_labels")
}

model DepreciationMethod {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  description  String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  asset_models AssetModel[]

  @@map("depreciation_methods")
}

model AssetCondition {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  assets      Asset[]

  @@map("asset_conditions")
}

model MaintenanceSchedule {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  assets      Asset[]

  @@map("maintenance_schedules")
}

model Department {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  assets     Asset[]
  users      User[]

  @@map("departments")
}

model Location {
  id                 Int             @id @default(autoincrement())
  name               String
  parent_location_id Int?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  assets             Asset[]
  parent_location    Location?       @relation("LocationHierarchy", fields: [parent_location_id], references: [id])
  child_locations    Location[]      @relation("LocationHierarchy")
  scheduled_tasks    ScheduledTask[]
  users              User[]

  @@map("locations")
}

model Role {
  id               Int              @id @default(autoincrement())
  role_name        String           @unique
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  role_permissions RolePermission[]
  user_roles       UserRole[]

  @@map("roles")
}

model Permission {
  id               Int              @id @default(autoincrement())
  permission_name  String           @unique
  display_name     String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("role_permissions")
}

model UserRole {
  user_id Int
  role_id Int
  role    Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("user_roles")
}

model User {
  id                           Int                       @id @default(autoincrement())
  employee_id                  String                    @unique
  first_name                   String
  last_name                    String
  nickname                     String?
  username                     String                    @unique
  email                        String                    @unique
  job_title                    String?
  manager_id                   Int?
  department_id                Int?
  location_id                  Int?
  office_phone                 String?
  work_cell_phone              String?
  personal_cell_phone          String?
  address                      String?
  photo_url                    String?
  is_active                    Boolean                   @default(true)
  last_verified_date           DateTime?
  verification_interval_months Int?
  created_at                   DateTime                  @default(now())
  updated_at                   DateTime                  @updatedAt
  activity_logs                ActivityLog[]
  assigned_assets              Asset[]                   @relation("AssetAssignedTo")
  comments                     Comment[]
  responsible_cis              ConfigurationItem[]       @relation("CIResponsibleUser")
  license_assignments          LicenseAssignment[]
  scheduled_tasks              ScheduledTask[]
  granted_access_logs          UserAccessDocumentation[] @relation("AccessGrantedBy")
  access_documentation         UserAccessDocumentation[]
  user_roles                   UserRole[]
  department                   Department?               @relation(fields: [department_id], references: [id])
  location                     Location?                 @relation(fields: [location_id], references: [id])
  manager                      User?                     @relation("UserManager", fields: [manager_id], references: [id])
  direct_reports               User[]                    @relation("UserManager")
  completed_workflow_tasks     WorkflowInstanceTask[]
  workflow_instances           WorkflowInstance[]

  @@map("users")
}

model UserAccessDocumentation {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  access_type        String
  access_value       String
  granted_by_user_id Int
  granted_at         DateTime @default(now())
  external_ticket_id String?
  granted_by_user    User     @relation("AccessGrantedBy", fields: [granted_by_user_id], references: [id])
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_access_documentation")
}

model AssetModel {
  id                     Int                            @id @default(autoincrement())
  name                   String
  manufacturer_id        Int
  category_id            Int
  model_number           String?
  eol_date               DateTime?
  image_url              String?
  depreciation_id        Int?
  created_at             DateTime                       @default(now())
  updated_at             DateTime                       @updatedAt
  category               Category                       @relation(fields: [category_id], references: [id])
  depreciation_method    DepreciationMethod?            @relation(fields: [depreciation_id], references: [id])
  manufacturer           Manufacturer                   @relation(fields: [manufacturer_id], references: [id])
  assets                 Asset[]
  kb_links               KBLink[]
  compatible_consumables ModelConsumableCompatibility[]

  @@map("asset_models")
}

model Asset {
  id                           Int                     @id @default(autoincrement())
  asset_tag                    String                  @unique
  serial_number                String?
  model_id                     Int
  status_id                    Int
  assigned_to_user_id          Int?
  location_id                  Int?
  department_id                Int?
  supplier_id                  Int?
  purchase_date                DateTime?
  purchase_cost                Decimal?                @db.Decimal(10, 2)
  warranty_expiry_date         DateTime?
  notes                        String?
  last_verified_date           DateTime?
  verification_interval_months Int?
  created_at                   DateTime                @default(now())
  updated_at                   DateTime                @updatedAt
  condition_id                 Int?
  maintenance_schedule_id      Int?
  device_name                  String?
  // Hardware specifications
  cpu                          String?
  ram_gb                       Int?
  storage_type                 String?
  storage_size_gb              Int?
  storage_unit                 String?                 @default("GB") // GB or TB
  screen_size                  String?
  gpu                          String?
  operating_system             String?
  bitlocker_recovery_key       String?
  bitlocker_enabled            Boolean?                @default(false) // Checkbox for encryption status
  // Desktop-specific fields
  usb_ports_type               String? // "4x USB 3.0, 2x USB-C" etc.
  display_ports_type           String? // "1x HDMI, 2x DisplayPort" etc.
  has_builtin_wifi             Boolean?                @default(false)
  has_cd_drive                 Boolean?                @default(false)
  psu_type                     String? // "Universal", "Proprietary", "External Adapter"
  psu_wattage                  Int?
  psu_cable_type               String? // "Standard IEC", "Proprietary", "External Adapter"
  // System and Network tracking
  os_install_date              DateTime?
  backup_type                  String? // "Cloud", "Local", "Network", "None"
  last_backup_date             DateTime?
  network_type                 String? // "DHCP", "Static"
  static_ip_address            String? // Only if network_type is "Static"
  vlan                         String?
  switch_name                  String?
  switch_port                  String?
  mac_address                  String? // Network MAC address
  // Lifecycle Management
  planned_refresh_date         DateTime? // When device should be replaced
  end_of_life_date             DateTime? // Vendor EOL date
  disposal_method              String? // "Recycle", "Donate", "Secure Wipe", "Return to Vendor"
  business_criticality         String? // "Critical", "High", "Medium", "Low"
  
  attachments                  AssetAttachment[]
  custom_field_values          AssetCustomFieldValue[]
  related_links                AssetRelatedLink[]
  child_relationships          AssetRelationship[]     @relation("ChildAsset")
  parent_relationships         AssetRelationship[]     @relation("ParentAsset")
  assigned_to_user             User?                   @relation("AssetAssignedTo", fields: [assigned_to_user_id], references: [id])
  condition                    AssetCondition?         @relation(fields: [condition_id], references: [id])
  department                   Department?             @relation(fields: [department_id], references: [id])
  location                     Location?               @relation(fields: [location_id], references: [id])
  maintenance_schedule         MaintenanceSchedule?    @relation(fields: [maintenance_schedule_id], references: [id])
  model                        AssetModel              @relation(fields: [model_id], references: [id])
  status                       StatusLabel             @relation(fields: [status_id], references: [id])
  supplier                     Supplier?               @relation(fields: [supplier_id], references: [id])
  comments                     Comment[]
  kb_links                     KBLink[]
  license_assignments          LicenseAssignment[]

  @@map("assets")
}

model CustomField {
  id           Int                     @id @default(autoincrement())
  name         String                  @unique
  field_type   String
  format_regex String?
  is_encrypted Boolean                 @default(false)
  created_at   DateTime                @default(now())
  updated_at   DateTime                @updatedAt
  asset_values AssetCustomFieldValue[]

  @@map("custom_fields")
}

model AssetCustomFieldValue {
  id       Int         @id @default(autoincrement())
  asset_id Int
  field_id Int
  value    String
  asset    Asset       @relation(fields: [asset_id], references: [id], onDelete: Cascade)
  field    CustomField @relation(fields: [field_id], references: [id], onDelete: Cascade)

  @@unique([asset_id, field_id])
  @@map("asset_custom_field_values")
}

model AssetAttachment {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  file_name   String
  file_path   String
  file_size   Int?
  mime_type   String?
  uploaded_at DateTime @default(now())
  asset       Asset    @relation(fields: [asset_id], references: [id], onDelete: Cascade)

  @@map("asset_attachments")
}

model AssetRelatedLink {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  link_type   String
  title       String
  url         String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  asset       Asset    @relation(fields: [asset_id], references: [id], onDelete: Cascade)

  @@map("asset_related_links")
}

model AssetRelationship {
  id                Int      @id @default(autoincrement())
  parent_asset_id   Int
  child_asset_id    Int
  relationship_type String
  description       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  child_asset       Asset    @relation("ChildAsset", fields: [child_asset_id], references: [id], onDelete: Cascade)
  parent_asset      Asset    @relation("ParentAsset", fields: [parent_asset_id], references: [id], onDelete: Cascade)

  @@unique([parent_asset_id, child_asset_id, relationship_type])
  @@map("asset_relationships")
}

model License {
  id            Int                 @id @default(autoincrement())
  license_name  String
  product_key   String?
  total_seats   Int
  purchase_date DateTime?
  expiry_date   DateTime?
  vendor_id     Int?
  notes         String?
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
  assignments   LicenseAssignment[]
  vendor        Manufacturer?       @relation(fields: [vendor_id], references: [id])

  @@map("licenses")
}

model LicenseAssignment {
  id                 Int      @id @default(autoincrement())
  license_id         Int
  user_id            Int?
  asset_id           Int?
  assigned_at        DateTime @default(now())
  external_ticket_id String?
  asset              Asset?   @relation(fields: [asset_id], references: [id])
  license            License  @relation(fields: [license_id], references: [id], onDelete: Cascade)
  user               User?    @relation(fields: [user_id], references: [id])

  @@map("license_assignments")
}

model Consumable {
  id                Int                            @id @default(autoincrement())
  name              String
  category_id       Int
  manufacturer_id   Int?
  model_number      String?
  current_stock     Int                            @default(0)
  min_stock_level   Int                            @default(0)
  created_at        DateTime                       @default(now())
  updated_at        DateTime                       @updatedAt
  category          Category                       @relation(fields: [category_id], references: [id])
  manufacturer      Manufacturer?                  @relation(fields: [manufacturer_id], references: [id])
  compatible_models ModelConsumableCompatibility[]

  @@map("consumables")
}

model ModelConsumableCompatibility {
  model_id      Int
  consumable_id Int
  consumable    Consumable @relation(fields: [consumable_id], references: [id], onDelete: Cascade)
  model         AssetModel @relation(fields: [model_id], references: [id], onDelete: Cascade)

  @@id([model_id, consumable_id])
  @@map("model_consumable_compatibility")
}

model CIType {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  configuration_items ConfigurationItem[]

  @@map("ci_types")
}

model ConfigurationItem {
  id                   Int              @id @default(autoincrement())
  name                 String
  ci_type_id           Int
  description          String?
  responsible_user_id  Int?
  status_id            Int
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  child_relationships  CIRelationship[] @relation("ChildCI")
  parent_relationships CIRelationship[] @relation("ParentCI")
  ci_type              CIType           @relation(fields: [ci_type_id], references: [id])
  responsible_user     User?            @relation("CIResponsibleUser", fields: [responsible_user_id], references: [id])
  status               StatusLabel      @relation(fields: [status_id], references: [id])
  kb_links             KBLink[]

  @@map("configuration_items")
}

model CIRelationship {
  id                Int               @id @default(autoincrement())
  parent_ci_id      Int
  child_ci_id       Int
  relationship_type String
  child_ci          ConfigurationItem @relation("ChildCI", fields: [child_ci_id], references: [id], onDelete: Cascade)
  parent_ci         ConfigurationItem @relation("ParentCI", fields: [parent_ci_id], references: [id], onDelete: Cascade)

  @@map("ci_relationships")
}

model WorkflowTemplate {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  description String?
  created_at  DateTime               @default(now())
  updated_at  DateTime               @updatedAt
  instances   WorkflowInstance[]
  tasks       WorkflowTemplateTask[]

  @@map("workflow_templates")
}

model WorkflowTemplateTask {
  id             Int                    @id @default(autoincrement())
  template_id    Int
  task_name      String
  description    String?
  display_order  Int
  task_type      String
  link_url       String?
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt
  instance_tasks WorkflowInstanceTask[]
  template       WorkflowTemplate       @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@map("workflow_template_tasks")
}

model WorkflowInstance {
  id             Int                    @id @default(autoincrement())
  template_id    Int
  target_user_id Int
  status         String                 @default("In Progress")
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt
  tasks          WorkflowInstanceTask[]
  target_user    User                   @relation(fields: [target_user_id], references: [id])
  template       WorkflowTemplate       @relation(fields: [template_id], references: [id])

  @@map("workflow_instances")
}

model WorkflowInstanceTask {
  instance_id          Int
  task_id              Int
  is_completed         Boolean              @default(false)
  completed_by_user_id Int?
  completed_at         DateTime?
  external_ticket_id   String?
  completed_by_user    User?                @relation(fields: [completed_by_user_id], references: [id])
  instance             WorkflowInstance     @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  task                 WorkflowTemplateTask @relation(fields: [task_id], references: [id])

  @@id([instance_id, task_id])
  @@map("workflow_instance_tasks")
}

model ScheduledTask {
  id                  Int       @id @default(autoincrement())
  task_name           String
  task_type           String
  description         String?
  frequency_type      String
  frequency_interval  Int
  last_completed_date DateTime?
  next_due_date       DateTime
  assigned_to_user_id Int
  location_id         Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  assigned_to_user    User      @relation(fields: [assigned_to_user_id], references: [id])
  location            Location? @relation(fields: [location_id], references: [id])

  @@map("scheduled_tasks")
}

model KBArticle {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  category   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  kb_links   KBLink[]

  @@map("kb_articles")
}

model KBLink {
  id                    Int                @id @default(autoincrement())
  article_id            Int
  asset_id              Int?
  asset_model_id        Int?
  configuration_item_id Int?
  article               KBArticle          @relation(fields: [article_id], references: [id], onDelete: Cascade)
  asset                 Asset?             @relation(fields: [asset_id], references: [id], onDelete: Cascade)
  asset_model           AssetModel?        @relation(fields: [asset_model_id], references: [id], onDelete: Cascade)
  configuration_item    ConfigurationItem? @relation(fields: [configuration_item_id], references: [id], onDelete: Cascade)

  @@map("kb_links")
}

model ActivityLog {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  action_type        String
  target_id          Int
  target_type        String
  details            Json?
  external_ticket_id String
  timestamp          DateTime @default(now())
  user               User     @relation(fields: [user_id], references: [id])

  @@map("activity_log")
}

model Comment {
  id         Int       @id @default(autoincrement())
  asset_id   Int
  user_id    Int
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  asset      Asset     @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comments_asset")
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_user")

  @@map("comments")
}
